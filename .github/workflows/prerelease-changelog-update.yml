name: 'pre-Release Changelog Update'

on:
  workflow_call:
  release:
    types: [prereleased]

jobs:
  #-----------------------------------------------------------------------------------------------------------------------

  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        # Push to protected branches
        # If your repository uses protected branches you have to make some changes
        # to your Workflow for the Action to work properly:
        #
        # You need a Personal Access Token and you either have to
        # a) allow force pushes
        # or
        # b) the Personal Access Token needs to belong to an Administrator.
        #
        # Add the following to 'with:' 'token: ${{ secrets.PAT }}'
        #
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          ref: ${{ github.event.release.target_commitish }}

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          release-notes: ${{ github.event.release.body }}
          latest-version: ${{ github.event.release.tag_name }}

      - uses: EndBug/add-and-commit@v9
        with:
          add: 'CHANGELOG.md'
          message: Update changelog to ${{ github.event.release.tag_name }}
          # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (see the paragraph below for more info)
          # Default: true
          push: false
          committer_name: Frieda Theodor Automatisierungs-Bot <email-roboter@figuren.theater>
          committer_email: email-roboter@figuren.theater

      # @TODO #57 Automatically bump version in all relevant files
      - name: Update version number in files
        env:
          NEW_VERSION: ${{ github.event.release.tag_name }}
        run: |

          # A `plugin.php' is the most common and can be found in almost(!) every repository.
          if [ -f plugin.php ]; then
            echo "NEW version in plugin.php: $NEW_VERSION"
            sed -ri "s/(Version:[[:space:]]*)[0-9]+\.[0-9]+\.[0-9]+/\\1$NEW_VERSION/g" plugin.php
            # git commit -am "Update version to $NEW_VERSION"
          fi

          # A 'readme.md' needs to be in place for regular Plugins hosted on wp.org/plugins.
          if [ -f readme.md ]; then
            echo "NEW version in readme.md: $NEW_VERSION"
            sed -ri "s/(Stable tag:[[:space:]]*)[0-9]+\.[0-9]+\.[0-9]+/\\1$NEW_VERSION/g" readme.md
            # git commit -am "Update version to $NEW_VERSION"
          fi

          # A 'package.json' can be in place for Plugins or modules, that uses any build or test runs.
          if [ -f package.json ]; then
            echo "NEW version in package.json: $NEW_VERSION"
            sed -ri "s/(\"version\":[[:space:]]*\")[0-9]+\.[0-9]+\.[0-9]+(\"/\1$NEW_VERSION\2/g" package.json
            # git commit -am "Update version to $NEW_VERSION"
          fi

if git diff --quiet --exit-code .; then
  echo "No changes made to any version-related file, skipping commit."
else
  git commit -am "Update version-numbers to $NEW_VERSION"
fi

    #  - uses: EndBug/add-and-commit@v9
    #    with:
    #      # Adding files
    #      # https://github.com/EndBug/add-and-commit/tree/v9/#adding-files
    #      add: 'plugin.php package.json'
    #      message: Update version to ${{ github.event.release.tag_name }}
    #      # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (see the paragraph below for more info)
    #      # Default: true
    #      push: false
    #      committer_name: Frieda Theodor Automatisierungs-Bot <email-roboter@figuren.theater>
    #      committer_email: email-roboter@figuren.theater
#
      - name: Push to protected branch
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}
          # branch: ${{ github.event.release.target_commitish }}
          branch: main
          #unprotect_reviews: true # has anoying side-effect: settings stays disabled if workflow fails
          acceptable_conclusions: success,skipped # A comma-separated list of acceptable statuses. If any of these statuses are present, the action will not fail.

  #-----------------------------------------------------------------------------------------------------------------------

  release:
    needs: update
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          ref: 'main'

      - name: Get latest commit ID
        run: |
          latest_commit_id=$(git rev-parse HEAD)
          echo "The latest commit ID is $latest_commit_id"
          echo "LATEST_COMMIT_ID=$latest_commit_id" >> $GITHUB_ENV

      - uses: jimeh/update-tags-action@v1
        with:
          tags: ${{ github.event.release.tag_name }},latest
          github_token: ${{ secrets.BOT_TOKEN }}
          ref: ${{ env.LATEST_COMMIT_ID }}

      - name: publish pre-Release as Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: context.ref.replace('refs/tags/', '')
            });
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: release.data.id,
              draft: false,
              prerelease: false,
              make_latest: true
            });
